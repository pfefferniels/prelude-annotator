import { Drawer, IconButton, ToggleButton, ToggleButtonGroup } from "@mui/material"
import { useEffect, useState } from "react"
import { v4 } from "uuid"
import { SelectionEditor } from "./SelectionEditor"
import Verovio from "./Verovio"
import { WorkPicker } from "./WorkPicker"
import { Menu } from "@mui/icons-material"
import { Stack } from "@mui/system"
import { removeThing, saveSolidDatasetAt, Thing } from "@inrupt/solid-client"
import { SelectionOverlay } from "./SelectionOverlay"
import { tab2cmn } from "./tab2cmn"
import { useDataset, useSession } from "@inrupt/solid-ui-react"

export interface E13 {
    id: string
    treatise: string
    property: string
    attribute: string
    comment: string
}

type Reference = string | Selection

export interface Selection {
    id: string
    refs: (Reference)[]
    e13s: E13[]
}

export const isSelection = (ref: Reference): ref is Selection => {
    return (ref as Selection).refs !== undefined
}

type DisplayMode = 'staff-notation' | 'tablature'

export const Workspace = () => {
    const { dataset } = useDataset()
    const { session } = useSession()

    const [workURI, setWorkURI] = useState('')
    const [displayMode, setDispayMode] = useState<DisplayMode>('tablature')
    const [mei, setMEI] = useState('')
    const [transformedMEI, setTransformedMEI] = useState('')
    const [selections, setSelections] = useState<Selection[]>([])
    const [activeSelectionId, setActiveSelectionId] = useState('')
    const [secondaryActiveSelection, setSecondaryActiveSelection] = useState('')
    const [workPickerOpen, setWorkPickerOpen] = useState(true)

    const [verovioReady, setVerovioReady] = useState(0)
    const [hullContainer, setHullContainer] = useState<SVGGElement>()

    // Add a <g> element to the SVG generated by verovio
    // which serves as a container for the overlays
    // that outline selections in the score
    useEffect(() => {
        if (!verovioReady) return

        const svg = document.querySelector('.verovio svg')
        if (!svg) {
            console.log('no SVG element found')
            return
        }

        const g = document.createElementNS('http://www.w3.org/2000/svg', 'g')
        g.setAttribute('id', 'hulls')
        const firstSystem = svg.querySelector('.system')
        if (!firstSystem) return

        firstSystem.parentElement?.insertBefore(g, firstSystem)
        setHullContainer(g)
    }, [verovioReady])

    // once the MEI file changes, make sure to have 
    // a CMN transcription immediately available
    useEffect(() => {
        if (!mei || mei.length === 0) return
        setTransformedMEI(tab2cmn(mei))
    }, [mei])

    const saveToPod = () => {
        // somehow connect all the Attribute Assignments
    }

    const startNewSelection = (ref: string) => {
        const id = v4()
        setSelections(selections => [...selections, {
            id,
            refs: [ref],
            e13s: []
        }])
        setActiveSelectionId(id)
    }

    const expandActiveSelection = (ref: string) => {
        const newSelections = selections.slice()
        newSelections.find(selection => selection.id === activeSelectionId)?.refs.push(ref)
        setSelections(newSelections)
    }

    const setSelection = (newSelection: Selection) => {
        // replace active selection id in list with newSelection
        const newSelections = selections.slice()
        const index = newSelections.findIndex(selection => selection.id === activeSelectionId)
        newSelections[index] = newSelection
        setSelections(newSelections)
    }

    const removeSelection = (id: string) => {
        const selectionToRemove = selections.find(selection => selection.id === id)
        if (dataset && selectionToRemove) {
            let modifiedDataset = removeThing(dataset, 'https://pfefferniels.inrupt.net/preludes/works.ttl' + selectionToRemove.id)
            selectionToRemove?.e13s.forEach(e13 => {
                modifiedDataset = removeThing(dataset, 'https://pfefferniels.inrupt.net/preludes/works.ttl' + e13.id)
            })
            saveSolidDatasetAt('https://pfefferniels.inrupt.net/preludes/works.ttl', modifiedDataset, { fetch: session.fetch as any })
        }
        const newSelections = selections.slice()
        newSelections.splice(selections.findIndex(selection => selection.id === id), 1)
        setSelections(newSelections)
    }

    const removeFromActiveSelection = (ref: string) => {
        const newSelections = selections.slice()
        const index = newSelections.findIndex(selection => selection.id === activeSelectionId)
        const refs = newSelections[index].refs
        refs.splice(refs.findIndex(r => r === ref), 1)
        setSelections(newSelections)
    }

    if (workPickerOpen) {
        return (
            <WorkPicker
                open={true}
                onClose={() => setWorkPickerOpen(false)}
                setWorkURI={setWorkURI}
                setMEI={setMEI}
                setSelections={setSelections} />
        )
    }

    return (
        <div style={{ margin: '1rem' }}>
            <Stack direction='row'>
                <IconButton onClick={() => setWorkPickerOpen(true)}>
                    <Menu />
                </IconButton>

                <ToggleButtonGroup
                    exclusive
                    size='small'
                    value={displayMode}
                    onChange={(e, newMode) => setDispayMode(newMode as DisplayMode)}>
                    <ToggleButton value='tablature' key='tablature'>
                        Tablature
                    </ToggleButton>
                    <ToggleButton value='staff-notation' key='staff-notation'>
                        Staff notation
                    </ToggleButton>
                </ToggleButtonGroup>
            </Stack>

            <Verovio
                mei={displayMode === 'tablature' ? mei : transformedMEI}
                expandActiveSelection={expandActiveSelection}
                removeFromActiveSelection={removeFromActiveSelection}
                startNewSelection={startNewSelection}
                onReady={() => setVerovioReady(verovioReady + 1)} />

            <Drawer
                variant='persistent'
                open={activeSelectionId !== ''}
                anchor='bottom'>
                <SelectionEditor
                    workURI={workURI}
                    setSelection={setSelection}
                    selection={selections.find(selection => selection.id === activeSelectionId)}
                    selectionList={selections.map(s => s.id)}
                    highlightSelection={(id: string) => setSecondaryActiveSelection(id)} />
            </Drawer>

            {hullContainer && selections.map(selection => {
                return (
                    <SelectionOverlay
                        key={selection.id}
                        selection={selection}
                        highlight={selection.id === secondaryActiveSelection}
                        setActiveSelection={setActiveSelectionId}
                        removeSelection={removeSelection}
                        svgBackground={hullContainer} />
                )
            })}
        </div>
    )
}